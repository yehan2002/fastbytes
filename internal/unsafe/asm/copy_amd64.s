// Code generated by command: go run main.go -out ./../copy_amd64.s -stubs ./../stub_amd64.go -pkg asm. DO NOT EDIT.

//go:build amd64 && !purego

#include "textflag.h"

// func Copy16(src []uint16, dst []uint16) uint64
// Requires: AVX, SSE, SSE2
TEXT ·Copy16(SB), NOSPLIT, $0-56
	MOVQ src_base+0(FP), AX
	MOVQ dst_base+24(FP), CX
	MOVQ src_len+8(FP), DX

	// Setup mask for byte shuffling
	MOVQ    $0x0e0f0c0d0a0b0809, BX
	MOVQ    BX, X1
	MOVQ    $0x0607040502030001, BX
	MOVQ    BX, X0
	MOVLHPS X1, X0

	// Copy 1024 bytes at a time
loop1024:
	CMPQ DX, $0x3f
	JLE  loop128

	// Read 1024 bytes
	MOVOU (AX), X1
	MOVOU 16(AX), X2
	MOVOU 32(AX), X3
	MOVOU 48(AX), X4
	MOVOU 64(AX), X5
	MOVOU 80(AX), X6
	MOVOU 96(AX), X7
	MOVOU 112(AX), X8

	// Shift bytes
	VPSHUFB X0, X1, X1
	VPSHUFB X0, X2, X2
	VPSHUFB X0, X3, X3
	VPSHUFB X0, X4, X4
	VPSHUFB X0, X5, X5
	VPSHUFB X0, X6, X6
	VPSHUFB X0, X7, X7
	VPSHUFB X0, X8, X8

	// Copy the bytes to dst
	MOVOU X1, (CX)
	MOVOU X2, 16(CX)
	MOVOU X3, 32(CX)
	MOVOU X4, 48(CX)
	MOVOU X5, 64(CX)
	MOVOU X6, 80(CX)
	MOVOU X7, 96(CX)
	MOVOU X8, 112(CX)

	// Advance Pointers by 128, decrement byte count
	ADDQ $-64, DX
	ADDQ $0x80, AX
	ADDQ $0x80, CX
	JMP  loop1024

loop128:
	// Loop until zero bytes remain.
	CMPQ DX, $0x07
	JLE  tail

	// Read 16 bytes from src, rotate them and copy them to dst.
	MOVOU   (AX), X1
	VPSHUFB X0, X1, X1
	MOVOU   X1, (CX)

	// Advance pointers, decrement byte count
	ADDQ $-8, DX
	ADDQ $0x10, AX
	ADDQ $0x10, CX
	JMP  loop128

	// Copy any leftover bytes
tail:
	CMPQ DX, $0x00
	JE   done
	MOVW (AX), BX
	ROLW $0x08, BX
	MOVW BX, (CX)
	ADDQ $0x02, AX
	ADDQ $0x02, CX
	DECQ DX
	JMP  tail

done:
	MOVQ src_len+8(FP), BX
	SUBQ DX, BX
	MOVQ BX, ret+48(FP)
	RET

// func Copy32(src []uint32, dst []uint32) uint64
// Requires: AVX, SSE, SSE2
TEXT ·Copy32(SB), NOSPLIT, $0-56
	MOVQ src_base+0(FP), AX
	MOVQ dst_base+24(FP), CX
	MOVQ src_len+8(FP), DX

	// Setup mask for byte shuffling
	MOVQ    $0x0c0d0e0f08090a0b, BX
	MOVQ    BX, X1
	MOVQ    $0x0405060700010203, BX
	MOVQ    BX, X0
	MOVLHPS X1, X0

	// Copy 1024 bytes at a time
loop1024:
	CMPQ DX, $0x1f
	JLE  loop128

	// Read 1024 bytes
	MOVOU (AX), X1
	MOVOU 16(AX), X2
	MOVOU 32(AX), X3
	MOVOU 48(AX), X4
	MOVOU 64(AX), X5
	MOVOU 80(AX), X6
	MOVOU 96(AX), X7
	MOVOU 112(AX), X8

	// Shift bytes
	VPSHUFB X0, X1, X1
	VPSHUFB X0, X2, X2
	VPSHUFB X0, X3, X3
	VPSHUFB X0, X4, X4
	VPSHUFB X0, X5, X5
	VPSHUFB X0, X6, X6
	VPSHUFB X0, X7, X7
	VPSHUFB X0, X8, X8

	// Copy the bytes to dst
	MOVOU X1, (CX)
	MOVOU X2, 16(CX)
	MOVOU X3, 32(CX)
	MOVOU X4, 48(CX)
	MOVOU X5, 64(CX)
	MOVOU X6, 80(CX)
	MOVOU X7, 96(CX)
	MOVOU X8, 112(CX)

	// Advance Pointers by 128, decrement byte count
	ADDQ $-32, DX
	ADDQ $0x80, AX
	ADDQ $0x80, CX
	JMP  loop1024

loop128:
	// Loop until zero bytes remain.
	CMPQ DX, $0x03
	JLE  tail

	// Read 16 bytes from src, rotate them and copy them to dst.
	MOVOU   (AX), X1
	VPSHUFB X0, X1, X1
	MOVOU   X1, (CX)

	// Advance pointers, decrement byte count
	ADDQ $-4, DX
	ADDQ $0x10, AX
	ADDQ $0x10, CX
	JMP  loop128

	// Copy any leftover bytes
tail:
	CMPQ   DX, $0x00
	JE     done
	MOVL   (AX), BX
	BSWAPL BX
	MOVL   BX, (CX)
	ADDQ   $0x04, AX
	ADDQ   $0x04, CX
	DECQ   DX
	JMP    tail

done:
	MOVQ src_len+8(FP), BX
	SUBQ DX, BX
	MOVQ BX, ret+48(FP)
	RET

// func Copy64(src []uint64, dst []uint64) uint64
// Requires: AVX, SSE, SSE2
TEXT ·Copy64(SB), NOSPLIT, $0-56
	MOVQ src_base+0(FP), AX
	MOVQ dst_base+24(FP), CX
	MOVQ src_len+8(FP), DX

	// Setup mask for byte shuffling
	MOVQ    $0x08090a0b0c0d0e0f, BX
	MOVQ    BX, X1
	MOVQ    $0x0001020304050607, BX
	MOVQ    BX, X0
	MOVLHPS X1, X0

	// Copy 1024 bytes at a time
loop1024:
	CMPQ DX, $0x0f
	JLE  loop128

	// Read 1024 bytes
	MOVOU (AX), X1
	MOVOU 16(AX), X2
	MOVOU 32(AX), X3
	MOVOU 48(AX), X4
	MOVOU 64(AX), X5
	MOVOU 80(AX), X6
	MOVOU 96(AX), X7
	MOVOU 112(AX), X8

	// Shift bytes
	VPSHUFB X0, X1, X1
	VPSHUFB X0, X2, X2
	VPSHUFB X0, X3, X3
	VPSHUFB X0, X4, X4
	VPSHUFB X0, X5, X5
	VPSHUFB X0, X6, X6
	VPSHUFB X0, X7, X7
	VPSHUFB X0, X8, X8

	// Copy the bytes to dst
	MOVOU X1, (CX)
	MOVOU X2, 16(CX)
	MOVOU X3, 32(CX)
	MOVOU X4, 48(CX)
	MOVOU X5, 64(CX)
	MOVOU X6, 80(CX)
	MOVOU X7, 96(CX)
	MOVOU X8, 112(CX)

	// Advance Pointers by 128, decrement byte count
	ADDQ $-16, DX
	ADDQ $0x80, AX
	ADDQ $0x80, CX
	JMP  loop1024

loop128:
	// Loop until zero bytes remain.
	CMPQ DX, $0x01
	JLE  tail

	// Read 16 bytes from src, rotate them and copy them to dst.
	MOVOU   (AX), X1
	VPSHUFB X0, X1, X1
	MOVOU   X1, (CX)

	// Advance pointers, decrement byte count
	ADDQ $-2, DX
	ADDQ $0x10, AX
	ADDQ $0x10, CX
	JMP  loop128

	// Copy any leftover bytes
tail:
	CMPQ   DX, $0x00
	JE     done
	MOVQ   (AX), BX
	BSWAPQ BX
	MOVQ   BX, (CX)
	ADDQ   $0x08, AX
	ADDQ   $0x08, CX
	DECQ   DX
	JMP    tail

done:
	MOVQ src_len+8(FP), BX
	SUBQ DX, BX
	MOVQ BX, ret+48(FP)
	RET
