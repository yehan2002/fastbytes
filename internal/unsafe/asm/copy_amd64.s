// Code generated by command: go run main.go -out ./../copy_amd64.s -stubs ./../stub_amd64.go -pkg asm. DO NOT EDIT.

// +build amd64,!purego

#include "textflag.h"

// func Copy16(src []uint16, dst []uint16) uint64
// Requires: AVX, SSE, SSE2
TEXT ·Copy16(SB), NOSPLIT, $0-56
	MOVQ src_base+0(FP), AX
	MOVQ dst_base+24(FP), CX
	MOVQ src_len+8(FP), DX

	// Setup byte mask for byte shuffling
	MOVQ    $0x0e0f0c0d0a0b0809, BX
	MOVQ    BX, X1
	MOVQ    $0x0607040502030001, BX
	MOVQ    BX, X0
	MOVLHPS X1, X0

loop:
	// Loop until zero bytes remain.
	CMPQ DX, $0x07
	JLE  done

	// Read 16 bytes from src, rotate them and copy them to dst.
	MOVOU   (AX), X1
	VPSHUFB X0, X1, X1
	MOVOU   X1, (CX)

	// Advance pointers, decrement byte count
	ADDQ $-8, DX
	ADDQ $0x10, AX
	ADDQ $0x10, CX
	JMP  loop

done:
	MOVQ src_len+8(FP), BX
	SUBQ DX, BX
	MOVQ BX, ret+48(FP)
	RET

// func Copy32(src []uint32, dst []uint32) uint64
// Requires: AVX, SSE, SSE2
TEXT ·Copy32(SB), NOSPLIT, $0-56
	MOVQ src_base+0(FP), AX
	MOVQ dst_base+24(FP), CX
	MOVQ src_len+8(FP), DX

	// Setup byte mask for byte shuffling
	MOVQ    $0x0c0d0e0f08090a0b, BX
	MOVQ    BX, X1
	MOVQ    $0x0405060700010203, BX
	MOVQ    BX, X0
	MOVLHPS X1, X0

loop:
	// Loop until zero bytes remain.
	CMPQ DX, $0x03
	JLE  done

	// Read 16 bytes from src, rotate them and copy them to dst.
	MOVOU   (AX), X1
	VPSHUFB X0, X1, X1
	MOVOU   X1, (CX)

	// Advance pointers, decrement byte count
	ADDQ $-4, DX
	ADDQ $0x10, AX
	ADDQ $0x10, CX
	JMP  loop

done:
	MOVQ src_len+8(FP), BX
	SUBQ DX, BX
	MOVQ BX, ret+48(FP)
	RET

// func Copy64(src []uint64, dst []uint64) uint64
// Requires: AVX, SSE, SSE2
TEXT ·Copy64(SB), NOSPLIT, $0-56
	MOVQ src_base+0(FP), AX
	MOVQ dst_base+24(FP), CX
	MOVQ src_len+8(FP), DX

	// Setup byte mask for byte shuffling
	MOVQ    $0x08090a0b0c0d0e0f, BX
	MOVQ    BX, X1
	MOVQ    $0x0001020304050607, BX
	MOVQ    BX, X0
	MOVLHPS X1, X0

loop:
	// Loop until zero bytes remain.
	CMPQ DX, $0x01
	JLE  done

	// Read 16 bytes from src, rotate them and copy them to dst.
	MOVOU   (AX), X1
	VPSHUFB X0, X1, X1
	MOVOU   X1, (CX)

	// Advance pointers, decrement byte count
	ADDQ $-2, DX
	ADDQ $0x10, AX
	ADDQ $0x10, CX
	JMP  loop

done:
	MOVQ src_len+8(FP), BX
	SUBQ DX, BX
	MOVQ BX, ret+48(FP)
	RET
